person(given = "B",
family = "Haining",
role = c("aut", "cre"),
email = "haining@berkeley.edu")
number_chromosomes
SPQValidate()<-function(QTLofInterest,
TraitofInterest,
number_repetitions,
gene_list,
chromosome_size,
MarkerList,
WholeGenomeGeneDistribution,
Placement_Type){
TrueGeneList<-gene_list
gene_list$EGN<-c(0)
QTLofInterest<-QTLofInterest[grep(TraitofInterest,QTLofInterest$Trait),]
num_QTL<-length(QTLofInterest$ChrNum)
num_Genes<-length(gene_list[,1])
number_chromosomes<-length(chromosome_size[,1])
toOutput<-as.data.frame(matrix(nrow= num_QTL,ncol=number_repetitions,data=0))
pb   <- txtProgressBar(0, 1, style=3)
Sectioned_List<-Marker_Sectioner(number_chromosomes,MarkerList)
Probabilities<-QTL_Placement_Probabilities(QTLofInterest,chromosome_size,Sectioned_List,Placement_Type)
if(Placement_Type=='centered'){
for(QTL in 1:num_QTL){
half_QTL_Length<-as.numeric(QTLofInterest[QTL,6])/2
for(SimRun in 1:number_repetitions){
for(Gene in 1:num_Genes){
SelectedLocus<-as.numeric(as.character(sample(1:length(WholeGenomeGeneDistribution$GeneMiddle),1)))
gene_list[Gene,3]<-as.numeric(as.character(WholeGenomeGeneDistribution[SelectedLocus,4]))
gene_list[Gene,2]<-as.numeric(as.character(WholeGenomeGeneDistribution[SelectedLocus,1]))
BP_locus<-gene_list[Gene,3]
Chr_number<-gene_list[Gene,2]
MarkersOnChromosome<-as.data.frame(as.matrix(eval(as.name(Sectioned_List[Chr_number]))))
chromosomeMarkerPositions<-as.integer(as.character(MarkersOnChromosome$Base))
knownLikelihood<-as.numeric(Probabilities[QTL])
RangeL<- BP_locus-half_QTL_Length
RangeR<- BP_locus+half_QTL_Length
MarkersL<-MarkersOnChromosome[which(chromosomeMarkerPositions + half_QTL_Length <= as.numeric(chromosome_size[Chr_number,4]) &
chromosomeMarkerPositions <= BP_locus &
chromosomeMarkerPositions >= RangeL),3]
LengthMarkersL<-as.numeric(length(MarkersL))
MarkersR<-MarkersOnChromosome[which(chromosomeMarkerPositions - half_QTL_Length >= as.numeric(chromosome_size[Chr_number,3]) &
chromosomeMarkerPositions > as.numeric(BP_locus) &  # it's not >= so we don't double-count locus
chromosomeMarkerPositions <= RangeR ),3]
LengthMarkersR<-as.numeric(length(MarkersR))
AvailableMarkers <- LengthMarkersL + LengthMarkersR
Number_Expected<- AvailableMarkers*knownLikelihood
if(length(Number_Expected)==0){
Number_Expected<-0
}
gene_list[Gene,4]<-gene_list[Gene,4]+ Number_Expected
}
SimEGN<-sum(gene_list[,4])
toOutput[QTL,SimRun]<-SimEGN
gene_list$EGN<-0
}
setTxtProgressBar(pb, QTL/length(QTLofInterest$ChrNum))
}
}
if(Placement_Type=='extension'){
for(QTL in 1:num_QTL){
QTL_Length<-as.numeric(QTLofInterest[QTL,6])
for(SimRun in 1:number_repetitions){
for(Gene in 1:num_Genes){
SelectedLocus<-as.numeric(as.character(sample(1:length(WholeGenomeGeneDistribution$GeneMiddle),1)))
gene_list[Gene,3]<-as.numeric(as.character(WholeGenomeGeneDistribution[SelectedLocus,4]))
gene_list[Gene,2]<-as.numeric(as.character(WholeGenomeGeneDistribution[SelectedLocus,1]))
BP_locus<-gene_list[Gene,3]
Chr_number<-gene_list[Gene,2]
MarkersOnChromosome<-as.data.frame(as.matrix(eval(as.name(Sectioned_List[Chr_number]))))
chromosomeMarkerPositions<-as.integer(as.character(MarkersOnChromosome$Base))
knownLikelihood<-as.numeric(Probabilities[QTL])
RangeL<- BP_locus-QTL_Length
RangeR<- BP_locus+QTL_Length
MarkersL<-MarkersOnChromosome[which(chromosomeMarkerPositions + QTL_Length <= as.numeric(chromosome_size[Chr_number,4]) &
chromosomeMarkerPositions <= BP_locus &
chromosomeMarkerPositions >= RangeL),3]
LengthMarkersL<-as.numeric(length(MarkersL))
MarkersR<-MarkersOnChromosome[which(chromosomeMarkerPositions - QTL_Length >= as.numeric(chromosome_size[Chr_number,3]) &
chromosomeMarkerPositions > as.numeric(BP_locus) &  # it's not >= so we don't double-count locus
chromosomeMarkerPositions <= RangeR ),3]
LengthMarkersR<-as.numeric(length(MarkersR))
AvailableMarkers <- LengthMarkersL + LengthMarkersR
Number_Expected<- AvailableMarkers*knownLikelihood
if(length(Number_Expected)==0){
Number_Expected<-0
}
gene_list[Gene,4]<-gene_list[Gene,4]+ Number_Expected
}
SimEGN<-sum(gene_list[,4])
toOutput[QTL,SimRun]<-SimEGN
gene_list$EGN<-0
}
setTxtProgressBar(pb, QTL/length(QTLofInterest$ChrNum))
}
}
PValList<-MonteCarloPValues(HBV_Output = toOutput, QTLofInterest = QTLofInterest)
SDs<-apply(toOutput,1,sd)
upper<-rowMeans(toOutput)+1.96*SDs
lower<-rowMeans(toOutput)-1.96*SDs
CIs<-as.data.frame(as.matrix(cbind(QTLofInterest$Length,QTLofInterest[,7],rowMeans(toOutput),SDs,lower,upper,PValList)))
colnames(CIs)<-c("QTL","Observed Value","Mean","SEM",
"Lower 95% CI","Upper 95% CI", "Monte Carlo P Values")
return(CIs)
}
txtProgressBar
??txtProgressBar
GeneCounter<-function(AllQTL,gene_list,TraitofInterest,Placement_Type, MarkerList){
temp_gene_list<-Gene_List_Groomer(MarkerList,gene_list,Placement_Type,TraitofInterest)
if(as.numeric(as.character(length(AllQTL[,1])))>1){
TraitsandTreatments<-AllQTL[,c(4,5)]
sepTreatments_QTL_Count<-plyr::ddply(TraitsandTreatments,.(TraitsandTreatments$trait,TraitsandTreatments$treatment),nrow)
colnames(sepTreatments_QTL_Count)<-c("trait",'treatment','frequency')
QTLData<-AllQTL[grep(TraitofInterest, TraitsandTreatments$trait),]
if(length(QTLData$chromosome)==0){
return("No QTL found for this trait.")
}
QTLData[,7]<-as.character(QTLData[,7])
identified_genes<-data.frame(matrix(ncol=length(QTLData)))
colnames(identified_genes)<-colnames(QTLData)
for (i in 1:length(QTLData[,1])){
QTLchromosome<-as.numeric(as.character(QTLData[i,1]))
QTLLCI<-as.numeric(as.character(QTLData[i,2]))
QTLRCI<-as.numeric(as.character(QTLData[i,3]))
for (Gene in 1: length(temp_gene_list[,1])){
if(as.numeric(as.character(temp_gene_list[Gene,2]))==as.numeric(as.character(QTLchromosome))){
GeneStartSite<-as.numeric(temp_gene_list[Gene,3])
if (GeneStartSite>=QTLLCI & GeneStartSite<=QTLRCI){
if(TraitofInterest==temp_gene_list[Gene,1]){
QTLData[i,7]<-paste0(QTLData[i,7]," and ",temp_gene_list[Gene,1])
identified_genes<-rbind(identified_genes,QTLData[i,])
}
}
}
}
}
identified_genes<-identified_genes[-1,]
identified_genes$Length<-as.numeric(as.character(identified_genes$RCI_pos))-as.numeric(as.character(identified_genes$LCI_marker))
identified_genes$type<-stringr::str_count(identified_genes$type,'and')
identified_genes2<-identified_genes
if(length(identified_genes[,1])>1){
for(possible_Duplicates in 1:(length(identified_genes[,1])-1)){
if(all(identified_genes[possible_Duplicates,c(1:6)]==identified_genes[possible_Duplicates+1,c(1:6)])){
identified_genes2[possible_Duplicates,c(1:7)]<-0
}
}
if(length(which(identified_genes2$type==0))>0){
CountedIdentifiedGenes<-identified_genes2[-which(identified_genes2$type==0),]
} else{
CountedIdentifiedGenes<-identified_genes2
}
CountedIdentifiedGenes$N_QTL<-c(0)
count<-c()
for(identified in 1:length(CountedIdentifiedGenes$chromosome)){
sep_Treat_QTL_4_u<-sepTreatments_QTL_Count[which(sepTreatments_QTL_Count$trait==CountedIdentifiedGenes[identified,4] &
sepTreatments_QTL_Count$treatment==CountedIdentifiedGenes[identified,5]),3]
count<-c(count,sep_Treat_QTL_4_u)
}
CountedIdentifiedGenes$N_QTL<-count
CountedIdentifiedGenesOutput<-CountedIdentifiedGenes[,c(1,2,3,4,5,8,7,9)]
toComp<-AllQTL
colnames(toComp)<-colnames(CountedIdentifiedGenes)[1:7]
toComp$chromosome<-as.double(toComp$chromosome)
toComp$LCI_marker<-as.double(toComp$LCI_marker)
toComp$RCI_pos<-as.double(toComp$RCI_pos)
toComp$treatment<-as.character(toComp$treatment)
toComp$expt_type<-as.character(toComp$expt_type)
toComp$type<-0
NoGenes<-setdiff(QTLData[1:6],CountedIdentifiedGenes[1:6])
if(length(NoGenes$chromosome)>0){
NoGenes$type<-0
NoGenes$Length<-as.numeric(as.character(NoGenes$RCI_pos))-as.numeric(as.character(NoGenes$LCI_marker))
NoGenes$Last<-"NA"
NoGenesOutput<-NoGenes[,c(1,2,3,4,5,8,7,9)]
colnames(NoGenesOutput)<-c("ChrNum", "LCLocus", "RCLocus", "Trait", "Treatment","Length",
"N Genes Within", "Number Trait QTL ID'd")
colnames(CountedIdentifiedGenesOutput)<-c("ChrNum", "LCLocus", "RCLocus", "Trait", "Treatment","Length",
"N Genes Within", "Number Trait QTL ID'd")
CountedIdentifiedGenesOutput2<-rbind(CountedIdentifiedGenesOutput,NoGenesOutput)
}else{
CountedIdentifiedGenesOutput2<-CountedIdentifiedGenesOutput
}
colnames(CountedIdentifiedGenesOutput2)<-c("ChrNum", "LCLocus", "RCLocus", "Trait","Treatment", "Length",
"N Genes Within", "Number Trait QTL ID'd")
return(CountedIdentifiedGenesOutput2)
}
if(length(identified_genes[,1])==1){
count<-c()
for(identified in 1:length(identified_genes$chromosome)){
sep_Treat_QTL_4_u<-sepTreatments_QTL_Count[which(sepTreatments_QTL_Count$trait==identified_genes[identified,4] &
sepTreatments_QTL_Count$treatment==identified_genes[identified,5]),3]
count<-c(count,sep_Treat_QTL_4_u)
}
identified_genes$QTL<-count
forReturn<-identified_genes[,c(1,2,3,4,5,8,7,9)]
colnames(forReturn)<-c("ChrNum", "LCLocus", "RCLocus", "Trait",'Treatment', "Length",
"N Genes Within", "Number Trait QTL ID'd")
return(forReturn)
} else{
return("No identified genes for this trait")
}
}
else{
AllQTL$Length<-as.numeric(as.character(AllQTL$RCI_pos))-as.numeric(as.character(AllQTL$LCI_marker))
AllQTL[,7]<-as.character(AllQTL[,7])
QTLchromosome<-as.numeric(as.character(AllQTL[i,1]))
QTLLCI<-as.numeric(as.character(AllQTL[i,2]))
QTLRCI<-as.numeric(as.character(AllQTL[i,3]))
identified_genes<-data.frame(matrix(ncol=length(AllQTL)))
colnames(identified_genes)<-colnames(AllQTL)
for (Gene in 1: length(gene_list$GeneID)){
if(as.numeric(as.character(temp_gene_list[Gene,2]))==as.numeric(as.character(QTLchromosome))){
GeneStartSite<-as.numeric(temp_gene_list[Gene,3])
if (GeneStartSite>=QTLLCI & GeneStartSite<=QTLRCI){
AllQTL[i,7]<-paste0(AllQTL[i,7]," and ",temp_gene_list[Gene,1])
identified_genes<-rbind(identified_genes,AllQTL[i,])
}
}
}
identified_genes<-identified_genes[-1,]
identified_genes$type<-stringr::str_count(identified_genes$type,'and')
identified_genes2<-identified_genes
if(length(as.numeric(as.character(identified_genes[,1])))>1){
for(possible_Duplicates in 1:(length(identified_genes[,1])-1)){
if(all(identified_genes[possible_Duplicates,c(1:6)]==identified_genes[possible_Duplicates+1,c(1:6)])){
identified_genes2[possible_Duplicates,c(1:7)]<-0
}
}
}
if(length(which(identified_genes2$type==0))>0){
CountedIdentifiedGenes<-identified_genes2[-which(identified_genes2$type==0),]
} else{
CountedIdentifiedGenes<-identified_genes2
}
CountedIdentifiedGenes<-CountedIdentifiedGenes[,c(1:4,8,7)]
CountedIdentifiedGenes$N_QTL<-c(1)
colnames(CountedIdentifiedGenes)<-c("ChrNum", "LCLocus", "RCLocus", "Trait", "Length",
"N Genes Within", "Number Trait QTL ID'd")
return(CountedIdentifiedGenes)
} }
temp_gene_list
